import pdfplumber
import re
from pathlib import Path

def extract_text_from_pdf(pdf_path: str) -> str:
    full_text = ""
    try:
        with pdfplumber.open(pdf_path) as pdf:
            for page in pdf.pages:
                text = page.extract_text()
                if text:
                    full_text += text + "\n"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {pdf_path.name}: {e}")
        return ""
    return full_text

def clear_text(text: str) -> str:
    # --- 1. –ü–æ–∏—Å–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ 'keyword(s)' / 'key word(s)'
    pattern_keywords = re.compile(r".*?key\s?word[s]?.*?\r?\n", re.IGNORECASE | re.DOTALL)
    text_after_keywords = pattern_keywords.sub("", text, count=1)
    if text_after_keywords != text:
        pattern_until_cyrillic = re.compile(r"^[^–∞-—è–ê-–Ø]+", re.DOTALL)
        text = pattern_until_cyrillic.sub("", text_after_keywords)
    else:
        # --- 2. –ü–æ–∏—Å–∫ '–≤–≤–µ–¥–µ–Ω–∏–µ' –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ –Ω–µ–≥–æ (–æ—Å—Ç–∞–≤–ª—è—è —Å—Ç—Ä–æ–∫—É)
        match_intro = re.search(r"–≤–≤–µ–¥–µ–Ω–∏–µ", text, re.IGNORECASE)
        if match_intro:
            text = text[match_intro.start():]
        else:
            # --- 3. –ü–æ–∏—Å–∫ '–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞' –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ –∏ –≤–∫–ª—é—á–∞—è —Å—Ç—Ä–æ–∫—É
            pattern_keywords_ru = re.compile(r".*?–∫–ª—é—á–µ–≤—ã–µ\s+—Å–ª–æ–≤–∞.*?\r?\n", re.IGNORECASE | re.DOTALL)
            text_after_kw_ru = pattern_keywords_ru.sub("", text, count=1)
            if text_after_kw_ru != text:
                text = text_after_kw_ru

    # --- 4. –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ü–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –≤—Ö–æ–∂–¥–µ–Ω–∏—é —Å–ø–∏—Å–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã
    end_patterns = [
        r"—Å–ø–∏—Å–æ–∫\s+–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã",
        r"–±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π\s+—Å–ø–∏—Å–æ–∫",
        r"—Å–ø–∏—Å–æ–∫\s+–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"
    ]
    combined_pattern = re.compile("|".join(end_patterns), re.IGNORECASE)

    matches = list(combined_pattern.finditer(text))
    if matches:
        last_match = matches[-1]
        start_of_line = text.rfind('\n', 0, last_match.start())
        if start_of_line == -1:
            start_of_line = 0
        text = text[:start_of_line].rstrip()

    return text

def main():
    pdf_dir = Path("PDFs")
    if not pdf_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ 'PDFs' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    pdf_files = list(pdf_dir.glob("*.pdf"))
    if not pdf_files:
        print("‚ùå –í –ø–∞–ø–∫–µ 'PDFs' –Ω–µ—Ç PDF-—Ñ–∞–π–ª–æ–≤.")
        return

    for pdf_path in pdf_files:
        print(f"\nüìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {pdf_path.name}")
        try:
            text = extract_text_from_pdf(str(pdf_path))
            if not text.strip():
                print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è.")
                continue

            cleared_text = clear_text(text)
            print("‚úÖ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–∏–º–µ—Ä –≤—ã–≤–æ–¥–∞:")
            print("-" * 40)
            print(cleared_text[:50])
            print("-" * 40)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {pdf_path.name}: {e}")

if __name__ == "__main__":
    main()
